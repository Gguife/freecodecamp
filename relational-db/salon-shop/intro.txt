Hints:
- Your script needs to finish running after doing any of the tasks described below or the tests won't pass
- The tests check the script output so don't use clear or other commands which might erase it 
- See examples.txt for example output of a passing script
- The tests may add data to your database, feel free to delete it


Complete the tasks below:
[ X ] - You should create a database named 'salon'
[ X ] - You should connect to your database, then create tables named customers, appointments and services
[ X ] - Each table should have a primary key column that automatically increments
[ X ] - Each primary key column should follow the naming convention. Example: customer_id key. Note that there's no 's' at the end of customer
[ X ] - Your 'appointments' table should have a 'customer_id' foreign key that references the 'customer_id' column the 'customers'
[ X ] - Your 'appointments' table should have a 'service_id' foreign key that references the 'service_id' column the 'services'
[ X ] - Your 'customers' table should have 'phone' that is a VARCHAR and must be unique
[ X ] - Your 'customers' and 'services' tables should have a 'name' column
[ X ] - Your 'appointments' table should have a 'time' column that is a VARCHAR
[ X ] - You should have at least three rows in your 'services' table for the different services you offer, on with a 'service_id' of 1
[ X ] - You should create a script file named 'salon.sh' on the project folder
[ X ] - Your script file should have a 'shebang' that user bash when the file is executed (user '#! /bin/bash')
[ X ] - Your script file should have executable permissions -> chmod +x nome_do_arquivo.sh
[ X ] - You should not use the clear command in your script ***
[ X ] - You should display a numbered list of the services you offer before the first prompt for input, each with the format '#) <service>'. For example, 1) Cut, where 1 is the service_id 
[ X ] - If you pick a service that doesn't exist, you be shown the same list of services again.
[ X ] - Your script should prompt users to enter  a service_id, phone number, a name if they aren't already a customer, and a time. You should use 'read' to read these inputs into variables named 'SERVICE_ID_SELECTED', 'CUSTOMER_PHONE' and 'SERVICE_TIME'
[ X ] - If a phone number entered doesn't exist, you should the customers name enter it, and the phone number, into the 'customers' table
[ X ] - You can create a row in the 'appointments' table by running your script and entering '1', '555-555-5555', 'Fabio', '10:30' at each request for input if that phone number isn't in the 'customers' table. The row should the customer_id for that customer, and the 'service_id' for the service entered
[ X ] - You can create another row in the 'appointments' table by running your script and entering '2', '555-555-5555', 'liam' at each request for input if that phone number is already in the 'customers' table. The row should have the 'customer_id' for that customer, and the 'service_id' for the service entered
[ X ] -  After an appointment is successfully added, you should output the message 'I have put you down for a <service> at <time>, <name>'. For example, if the user chooses 'cut' as the service, '10:30'' is entered for the time, and their name is 'Fabio' in the database the output would be 'I have put you down for a cut at 10:30, Fabio'. Make sure your script finishes running after completing any of the tasks above, or else the tests won't pass
